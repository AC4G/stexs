REVOKE INSERT (app_id, scope_id) ON TABLE public.oauth2_app_scopes FROM authenticated;
REVOKE SELECT ON TABLE public.oauth2_app_scopes FROM anon;
REVOKE SELECT ON TABLE public.oauth2_app_scopes FROM authenticated;
REVOKE SELECT ON TABLE public.scopes FROM anon;
REVOKE SELECT ON TABLE public.scopes FROM authenticated;
REVOKE SELECT ON TABLE public.oauth2_apps FROM anon;
REVOKE SELECT ON TABLE public.projects FROM anon;
REVOKE SELECT ON TABLE public.organizations FROM anon;
REVOKE SELECT ON TABLE public.profiles FROM anon;
REVOKE EXECUTE ON FUNCTION public.generate_new_client_secret(INT) FROM authenticated;
REVOKE INSERT (name, organization_id, description, homepage_url, redirect_url) ON TABLE public.oauth2_apps FROM authenticated;
REVOKE UPDATE (name, description, homepage_url, redirect_url) ON TABLE public.oauth2_apps FROM authenticated;
REVOKE DELETE ON TABLE public.organizations FROM authenticated;
REVOKE SELECT ON TABLE public.oauth2_apps FROM authenticated;
REVOKE DELETE ON TABLE public.projects FROM authenticated;
REVOKE DELETE ON TABLE public.oauth2_apps FROM authenticated;
REVOKE DELETE ON TABLE public.oauth2_app_scopes FROM authenticated;
REVOKE SELECT ON public.oauth2_apps_public FROM authenticated;

DROP TRIGGER IF EXISTS generate_client_credentials_trigger ON public.oauth2_apps;
DROP FUNCTION IF EXISTS public.generate_client_credentials();
DROP TRIGGER IF EXISTS create_profile_trigger ON auth.users;
DROP FUNCTION IF EXISTS auth.create_profile_for_user();
DROP TABLE IF EXISTS auth.oauth2_connections;
DROP TABLE IF EXISTS auth.oauth2_authorization_token_scopes;
DROP TABLE IF EXISTS auth.oauth2_authorization_tokens;
DROP TABLE IF EXISTS public.oauth2_app_scopes;
DROP TABLE IF EXISTS public.scopes;
DROP VIEW IF EXISTS public.oauth2_apps_public;
DROP TABLE IF EXISTS public.oauth2_apps;
DROP TABLE IF EXISTS public.projects;
DROP TABLE IF EXISTS public.organizations;
DROP TABLE IF EXISTS public.profiles;
DROP TRIGGER IF EXISTS encrypt_password_trigger ON auth.users;
DROP FUNCTION IF EXISTS auth.encrypt_password();
DROP TRIGGER IF EXISTS check_username_and_email_trigger ON auth.users;
DROP FUNCTION IF EXISTS auth.check_username_and_email_before_insert();
DROP TRIGGER IF EXISTS create_mfa_trigger ON auth.users;
DROP FUNCTION IF EXISTS auth.create_mfa_for_user;
DROP TABLE IF EXISTS auth.users;
DROP TABLE IF EXISTS auth.mfa;

REVOKE USAGE ON SCHEMA public FROM anon;
REVOKE USAGE ON SCHEMA auth FROM anon;
REVOKE USAGE ON SCHEMA extensions FROM anon;
REVOKE ALL ON auth.users FROM anon;
REVOKE ALL ON auth.mfa FROM anon;
REVOKE ALL ON auth.refresh_tokens FROM anon;

DROP FUNCTION IF EXISTS auth.jwt();
DROP ROLE anon;
DROP EXTENSION IF EXISTS "citext" CASCADE;
DROP EXTENSION IF EXISTS "pgcrypto" CASCADE;
DROP EXTENSION IF EXISTS "uuid-ossp" CASCADE;
DROP SCHEMA auth CASCADE;
DROP SCHEMA extensions CASCADE;
