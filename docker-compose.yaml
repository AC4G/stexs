networks:
  pulsar:
    driver: bridge

volumes:
  db-data:
  kong-data:
  minio-data:
  dragonfly-data:

x-kong-image: &kong-image
  image: docker.io/kong/kong-gateway:3.4

x-stexs-db-env: &stexs-db-env
  PGPORT: ${STEXS_DB_PORT:-5431}
  POSTGRES_PASSWORD: ${STEXS_DB_PWD:-postgres}
  POSTGRES_DB: ${STEXS_DB_NAME:-postgres}
  POSTGRES_USER: ${STEXS_DB_USER:-postgres}

services:
  db:
    image: docker.io/postgres:17.2
    container_name: db
    restart: unless-stopped
    environment:
      <<: *stexs-db-env
    ports: 
      - ${STEXS_DB_PORT:-5431}:${STEXS_DB_PORT:-5431}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - db-data:/var/lib/postgresql/data

  db-migrate:
    image: stexs-db-migrate
    build:
      context: .
      dockerfile: ./docker/migrate.Dockerfile
    container_name: db-migrate
    depends_on:
      db:
        condition: service_healthy
    environment:
      <<: *stexs-db-env
    volumes:
      - ./scripts/migrate.db.sh:/data/scripts/migrate.db.sh
      - ./db/migrations:/data/migrations
    command: ["/bin/sh", "/data/scripts/migrate.db.sh"]

  db-seed:
    image: stexs-db-seed
    build:
      context: .
      dockerfile: ./docker/seed.Dockerfile
    container_name: db-seed
    depends_on:
      db:
        condition: service_healthy
      db-migrate:
        condition: service_completed_successfully
    environment:
      <<: *stexs-db-env
      PGHOST: db
    volumes:
      - ./scripts/seed.db.sh:/data/scripts/seed.db.sh
      - ./db/seeds:/data/seeds
    command: ["/bin/sh", "/data/scripts/seed.db.sh"]

  rest:
    image: docker.io/postgrest/postgrest:v12.2.3
    container_name: rest
    restart: unless-stopped
    ports:
      - ${REST_PORT:-3002}:3000
    depends_on:
      db:
        condition: service_healthy
      db-migrate:
        condition: service_completed_successfully
    environment:
      PGRST_DB_URI: postgres://authenticator:authenticator@db:${STEXS_DB_PORT:-5431}/${STEXS_DB_NAME:-postgres}
      PGRST_DB_SCHEMAS: ${PGRST_DB_SCHEMAS:-public}
      PGRST_DB_ANON_ROLE: anon
      PGRST_DB_MAX_ROWS: ${PGRST_DB_MAX_ROWS:-1000}
      PGRST_JWT_SECRET: ${ACCESS_TOKEN_SECRET:-}
      PGRST_JWT_AUD: ${AUDIENCE:-}

  mailpit:
    image: docker.io/axllent/mailpit:v1.21.8
    container_name: mailpit
    restart: unless-stopped
    ports:
      - ${SMTP_PORT:-1025}:1025
      - ${SMTP_DASHBOARD_PORT:-8025}:8025

  minio:
    image: quay.io/minio/minio:RELEASE.2024-12-18T13-15-44Z
    container_name: minio
    restart: unless-stopped
    ports: 
      - ${MINIO_ADMIN_PORT:-9002}:9000
      - ${STORAGE_PORT:-9001}:9001
    volumes:
      - minio-data:/data
    command: ["server", "--console-address", ":9001", "/data"]

  dragonfly:
    image: docker.dragonflydb.io/dragonflydb/dragonfly
    container_name: dragonfly
    restart: unless-stopped
    ports:
      - ${DRAGONFLY_PORT:-6380}:6379
    ulimits:
      memlock: -1
    deploy:
      resources:
        limits:
          cpus: 1
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "localhost", "-p", "6379", "PING"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - dragonfly-data:/data

  kong-migrate: 
    <<: *kong-image
    container_name: kong-migrate
    environment:
      KONG_PG_DATABASE: ${STEXS_DB_NAME:-postgres}
      KONG_PG_USER: ${STEXS_DB_USER:-postgres}
      KONG_PG_HOST: db
      KONG_PG_PORT: ${STEXS_DB_PORT:-5431}
      KONG_PG_PASSWORD: ${STEXS_DB_PWD:-postgres}
      KONG_PASSWORD: test
    command: ["kong", "migrations", "bootstrap"]
    depends_on:
      db:
        condition: service_healthy

  kong:
    <<: *kong-image
    container_name: kong
    restart: unless-stopped
    ports:
      - ${KONG_GATEWAY_PORT:-8000}:8000
      - ${KONG_ADMIN_PORT:-8001}:8001
      - ${KONG_GUI_PORT:-8002}:8002
    depends_on:
      db:
        condition: service_healthy
      kong-migrate:
        condition: service_completed_successfully
    environment:
      KONG_PG_DATABASE: ${STEXS_DB_NAME:-postgres}
      KONG_PG_USER: ${STEXS_DB_USER:-postgres}
      KONG_PG_HOST: db
      KONG_PG_PORT: ${STEXS_DB_PORT:-5431}
      KONG_PG_PASSWORD: ${STEXS_DB_PWD:-postgres}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_CASSANDRA_CONTACT_POINTS: db
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_ADMIN_GUI_URL: http://localhost:8002
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 5
    extra_hosts:
      - "host.docker.internal:host-gateway"

  kong-setup:
    image: stexs-kong-setup
    build:
      context: .
      dockerfile: ./docker/kong.Dockerfile
    container_name: kong-setup
    depends_on:
      kong:
        condition: service_healthy
      kong-migrate:
        condition: service_completed_successfully
    environment:
      KONG_ADMIN_URL: http://kong:8001
      API_PORT: ${API_PORT:-3001}
      API_PATH: ${KONG_STEXS_API_PATH:-/api/v1}
      REST_PORT: ${REST_PORT:-3002}
      REST_API_PATH: ${KONG_REST_API_PATH:-/rest/v1}
    volumes:
      - ./scripts/setup.kong.sh:/data/scripts/setup.kong.sh
    command: ["/bin/sh", "/data/scripts/setup.kong.sh"]

  swagger-rest:
    image: docker.io/swaggerapi/swagger-ui:v5.18.2
    container_name: swagger-rest
    restart: unless-stopped
    ports:
      - ${SWAGGER_PORT:-8080}:8080
    depends_on:
      kong:
        condition: service_healthy
      kong-setup:
        condition: service_completed_successfully
    environment:
      SWAGGER_JSON_URL: http://localhost:8000${KONG_REST_API_PATH:-/rest/v1}

  lago-setup:
    image: stexs-lago-setup
    build:
      context: .
      dockerfile: ./docker/lago.Dockerfile
    container_name: lago-setup
    volumes:
      - ./scripts/setup.lago.sh:/data/scripts/setup.lago.sh
      - /var/run/docker.sock:/var/run/docker.sock
    command: ["/bin/sh", "/data/scripts/setup.lago.sh"]


  zookeeper:
    image: apachepulsar/pulsar:latest
    container_name: zookeeper
    restart: on-failure
    networks:
      - pulsar
    volumes:
      - ./docker/data/zookeeper:/pulsar/data/zookeeper
    environment:
      - metadataStoreUrl=zk:zookeeper:2181
      - PULSAR_MEM=-Xms256m -Xmx256m -XX:MaxDirectMemorySize=256m
    command:
      - bash
      - -c 
      - |
        bin/apply-config-from-env.py conf/zookeeper.conf && \
        bin/generate-zookeeper-config.sh conf/zookeeper.conf && \
        exec bin/pulsar zookeeper    
    healthcheck:
      test: ["CMD", "bin/pulsar-zookeeper-ruok.sh"]
      interval: 10s
      timeout: 5s
      retries: 30

  pulsar-init:
    container_name: pulsar-init
    hostname: pulsar-init
    image: apachepulsar/pulsar:latest
    networks:
      - pulsar
    command:
      - bash
      - -c 
      - |
        bin/pulsar initialize-cluster-metadata \
        --cluster cluster-a \
        --zookeeper zookeeper:2181 \
        --configuration-store zookeeper:2181 \
        --web-service-url http://broker:8080 \
        --broker-service-url pulsar://broker:6650
    depends_on:
      zookeeper:
        condition: service_healthy

  bookie:
    image: apachepulsar/pulsar:latest
    container_name: bookie
    restart: unless-stopped
    networks:
      - pulsar
    environment:
      - clusterName=cluster-a
      - zkServers=zookeeper:2181
      - metadataServiceUri=metadata-store:zk:zookeeper:2181
      - advertisedAddress=bookie
      - BOOKIE_MEM=-Xms512m -Xmx512m -XX:MaxDirectMemorySize=256m
    depends_on:
      zookeeper:
        condition: service_healthy
      pulsar-init:
        condition: service_completed_successfully
    volumes:
      - ./docker/data/bookkeeper:/pulsar/data/bookkeeper
    command: bash -c "bin/apply-config-from-env.py conf/bookkeeper.conf && exec bin/pulsar bookie"

  broker:
    image: apachepulsar/pulsar:latest
    container_name: broker
    hostname: broker
    restart: unless-stopped
    networks:
      - pulsar
    environment:
      - metadataStoreUrl=zk:zookeeper:2181
      - zookeeperServers=zookeeper:2181
      - clusterName=cluster-a
      - managedLedgerDefaultEnsembleSize=1
      - managedLedgerDefaultWriteQuorum=1
      - managedLedgerDefaultAckQuorum=1
      - advertisedAddress=broker
      - advertisedListeners=external:pulsar://127.0.0.1:6650
      - PULSAR_MEM=-Xms512m -Xmx512m -XX:MaxDirectMemorySize=256m
    depends_on:
      zookeeper:
        condition: service_healthy
      bookie:
        condition: service_started
    ports:
      - "6650:6650"
      - "8081:8080"
    command: bash -c "bin/apply-config-from-env.py conf/broker.conf && exec bin/pulsar broker"
